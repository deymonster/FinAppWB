import logging
import os

from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

import config
from app.database.service import get_user_role, get_user_by_tg_id
from app.keyboards.builders import inline_builder
from app.states import UserRoleState

import app.keyboards as kb
import pdb

router = Router()


@router.message(CommandStart())
@router.callback_query(F.data == "main_page")
async def start(message: Message | CallbackQuery, state: FSMContext):
    """ Handler for /start command

    """

    tg_id = message.from_user.id
    current_user = await get_user_by_tg_id(tg_id=tg_id)
    await state.update_data(current_user=current_user)

    # pdb.set_trace()
    if current_user:
        if current_user.role_id == config.ADMIN_ROLE_ID:

            pattern = dict(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=inline_builder(
                    ["üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", " üí∞–ó–∞—è–≤–∫–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
                    ["users", "requests", "add_request"]
                )
            )
            if isinstance(message, CallbackQuery):
                await message.message.edit_text(**pattern)
                await message.answer()
            else:
                await message.answer(**pattern)
        if current_user.role_id == config.MANAGER_ROLE_ID:
            pattern = dict(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=inline_builder(
                    [" üí∞–ó–∞—è–≤–∫–∏", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É"],
                    ["requests",  "add_request"]
                )
            )
            if isinstance(message, CallbackQuery):
                await message.message.edit_text(**pattern)
                await message.answer()
            else:
                await message.answer(**pattern)
        if current_user.role_id == config.DIRECTOR_ROLE_ID:
            pattern = dict(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=inline_builder(
                    [" üÜï üí∞–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏", "üëå üí∞–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏", "‚õîÔ∏è üí∞ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
                    ["new_requests",  "confirmed_requests", "rejected_requests"]
                )
            )
            if isinstance(message, CallbackQuery):
                await message.message.edit_text(**pattern)
                await message.answer()
            else:
                await message.answer(**pattern)

        if current_user.role_id == config.ACCOUNTANT_ROLE_ID:
            pattern = dict(
                text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
                reply_markup=inline_builder(
                    ["üëå üí∞–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏"],
                    ["confirmed_requests"]
                )
            )
            if isinstance(message, CallbackQuery):
                await message.message.edit_text(**pattern)
                await message.answer()
            else:
                await message.answer(**pattern)
        if current_user.role_id == config.DEFAULT_ROLE_ID:
            await message.answer('–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!')

    else:
        await message.answer('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. '
                             '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', reply_markup=inline_builder(
                                    ["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–û—Ç–º–µ–Ω–∞"],
                                    ["confirm_register_user", "main_page"]
                                )
                             )
